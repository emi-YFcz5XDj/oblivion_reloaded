name: deployTemplate

on:
  workflow_call:
    inputs:
      projectname:
        required: true
        type: string

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  VERSION: ${{github.ref_name}}
  ARTIFACT_NAME: ${{inputs.projectname}}-${{github.ref_name}}

jobs:
  build:
    runs-on: windows-2025

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Install rust nightly # TODO: switch to stable once vec_into_raw_parts and const_trait_impl become stable
      run: |
        rustup toolchain add nightly-x86_64-pc-windows-msvc
        rustup default nightly-x86_64-pc-windows-msvc
        rustup target add i686-pc-windows-msvc

    - name: Build Configurator
      run: |
        cd Configurator
        $Env:RUSTFLAGS = "-C target-cpu=znver1"
        cargo build --target i686-pc-windows-msvc --profile release

    - name: Restore NuGet packages
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: cmd /c build.bat ${{inputs.projectname}}

    - name: zip files
      uses: vimtor/action-zip@v1
      with:
        files: build/${{inputs.projectname}}/
        dest: ${{env.ARTIFACT_NAME}}.zip

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{env.ARTIFACT_NAME}}
        tag_name: ${{env.VERSION}}
        # body_path: CHANGELOG.md #TODO: add changelog
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload Release Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{env.ARTIFACT_NAME}}.zip
        asset_name: ${{env.ARTIFACT_NAME}}.zip
        asset_content_type: application/zip